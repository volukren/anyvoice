generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name          String?   @map("name")
  email         String    @unique @map("email")
  emailVerified DateTime? @map("email_verified")
  image         String?   @map("image")
  role          String    @default("user") @map("role")

  plan           String    @default("free") @map("plan")
  customerId     String?   @unique @map("customer_id") // Stripe customer id
  subscriptionId String?   @unique @map("subscription_id") // Stripe subscription id
  startsAt       DateTime? @map("starts_at") // Stripe subscription start date
  endsAt         DateTime? @map("ends_at") // Stripe subscription end date

  characters Int @default(1000) @map("characters")
  voices     Int @default(3) @map("voices")

  samples  SampleAudio[]
  accounts Account[]

  @@map("users")
}

model Account {
  userId            Int     @map("user_id")
  type              String  @map("type")
  provider          String  @map("provider")
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @map("refresh_token")
  access_token      String? @map("access_token")
  expires_at        Int?    @map("expires_at")
  token_type        String? @map("token_type")
  scope             String? @map("scope")
  id_token          String? @map("id_token")
  session_state     String? @map("session_state")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("accounts")
}

model VerificationToken {
  identifier String   @map("identifier")
  token      String   @map("token")
  expires    DateTime @map("expires")

  @@id([identifier, token])
  @@map("verification_tokens")
}

model SampleAudio {
  id        Int      @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now()) @map("created_at")

  userId Int  @map("user_id")
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  audioFile String @map("audio_file")
  name      String @map("name")

  requests Request[]

  @@map("sample_audios")
}

model Request {
  id        Int      @id @default(autoincrement()) @map("id")
  createdAt DateTime @default(now()) @map("created_at")

  sampleAudioId Int         @map("sample_audio_id")
  sampleAudio   SampleAudio @relation(fields: [sampleAudioId], references: [id], onDelete: Cascade)

  text           String @map("text")
  characterCount Int    @map("character_count")

  // created, processing, success, error
  status String @default("created") @map("status")

  @@map("requests")
}

model Example {
  id Int @id @default(autoincrement()) @map("id")

  name  String @map("name")
  photo String @map("photo")

  items ExampleItem[]

  @@map("examples")
}

model ExampleItem {
  id Int @id @default(autoincrement()) @map("id")

  exampleId Int     @map("example_id")
  example   Example @relation(fields: [exampleId], references: [id], onDelete: Cascade)

  audioFile String @map("audio_file")

  @@map("example_items")
}
